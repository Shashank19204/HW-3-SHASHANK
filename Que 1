#include <iostream>
#include <vector>
#include <stdexcept>
#include <cmath>

template<typename T>
class Matrix {
    std::vector<std::vector<T>> data;
    size_t rows;
    size_t cols;

public:
    Matrix(size_t rows, size_t cols, const T& initialValue = T())
        : rows(rows), cols(cols), data(rows, std::vector<T>(cols, initialValue)) {}

    size_t numRows() const {
        return rows;
    }

    size_t numCols() const {
        return cols;
    }

    void transpose() {
        std::vector<std::vector<T>> newData(cols, std::vector<T>(rows));
        
        for (size_t row = 0; row < rows; ++row) {
            for (size_t col = 0; col < cols; ++col) {
                newData[col][row] = data[row][col];
            }
        }
        
        data = std::move(newData);
        std::swap(rows, cols);
    }

    T& operator()(size_t row, size_t col) {
        if (row < rows && col < cols) {
            return data[row][col];
        } else {
            throw std::out_of_range("Index out of range.");
        }
    }

    const T& operator()(size_t row, size_t col) const {
        if (row < rows && col < cols) {
            return data[row][col];
        } else {
            throw std::out_of_range("Index out of range.");
        }
    }
};

template<typename T>
Matrix<T> operator+(const Matrix<T>& lhs, const Matrix<T>& rhs) {
    if (lhs.numRows() != rhs.numRows() || lhs.numCols() != rhs.numCols()) {
        throw std::invalid_argument("Matrix dimensions must match.");
    }
    
    Matrix<T> result(lhs.numRows(), lhs.numCols());
    
    for (size_t row = 0; row < lhs.numRows(); ++row) {
        for (size_t col = 0; col < lhs.numCols(); ++col) {
            result(row, col) = lhs(row, col) + rhs(row, col);
        }
    }
    
    return result;
}

template<typename T>
Matrix<T> operator-(const Matrix<T>& lhs, const Matrix<T>& rhs) {
    if (lhs.numRows() != rhs.numRows() || lhs.numCols() != rhs.numCols()) {
        throw std::invalid_argument("Matrix dimensions must match.");
    }
    
    Matrix<T> result(lhs.numRows(), lhs.numCols());
    
    for (size_t row = 0; row < lhs.numRows(); ++row) {
        for (size_t col = 0; col < lhs.numCols(); ++col) {
            result(row, col) = lhs(row, col) - rhs(row, col);
        }
    }
    
    return result;
}

template<typename T>
Matrix<T> operator*(const Matrix<T>& lhs, const Matrix<T>& rhs) {
    if (lhs.numCols() != rhs.numRows()) {
        throw std::invalid_argument("Matrix dimensions are incompatible for multiplication.");
    }
    
    Matrix<T> result(lhs.numRows(), rhs.numCols());
    
    for (size_t row = 0; row < lhs.numRows(); ++row) {
        for (size_t col = 0; col < rhs.numCols(); ++col) {
            T sum = T();
            for (size_t k = 0; k < lhs.numCols(); ++k) {
                sum += lhs(row, k) * rhs(k, col);
            }
            result(row, col) = sum;
        }
    }
    
    return result;
}

template<typename T>
Matrix<T> operator*(const Matrix<T>& matrix, const T& scalar) {
    Matrix<T> result(matrix.numRows(), matrix.numCols());
    
    for (size_t row = 0; row < matrix.numRows(); ++row) {
        for (size_t col = 0; col < matrix.numCols(); ++col) {
            result(row, col) = matrix(row, col) * scalar;
        }
    }
    
    return result;
}

template<typename T>
Matrix<T> operator*(const T& scalar, const Matrix<T>& matrix) {
    return matrix * scalar;
}

// Specialization for Matrix<int> with size (n,1)
template<>
class Matrix<int> {
    std::vector<int> data;
    size_t rows;
    size_t cols;

public:
    Matrix(size_t rows, size_t cols, const int& initialValue = int())
        : rows(rows), cols(cols), data(rows * cols, initialValue) {}

    size_t numRows() const {
        return rows;
    }

    size_t numCols() const {
        return cols;
    }

    int& operator()(size_t row, size_t col) {
        if (row < rows && col < cols) {
            return data[row * cols + col];
        } else {
            throw std::out_of_range("Index out of range.");
        }
    }

    const int& operator()(size_t row, size_t col) const {
        if (row < rows && col < cols) {
            return data[row * cols + col];
        } else {
            throw std::out_of_range("Index out of range.");
        }
    }

    // Vector's L2 Norm
    double Norm() const {
        double sumOfSquares = 0.0;
        
        for (size_t row = 0; row < rows; ++row) {
            for (size_t col = 0; col < cols; ++col) {
                sumOfSquares += (*this)(row, col) * (*this)(row, col);
            }
        }
        
        return std::sqrt(sumOfSquares);
    }
};

int main() {
    Matrix<int> mat(3, 2);
    
    mat(0, 0) = 1;
    mat(0, 1) = 2;
    mat(1, 0) = 3;
    mat(1, 1) = 4;
    mat(2, 0) = 5;
    mat(2, 1) = 6;
    
    //mat.transpose(); // Remove unsupported transpose operation
    
    for (size_t row = 0; row < mat.numRows(); ++row) {
        for (size_t col = 0; col < mat.numCols(); ++col) {
            std::cout << mat(row, col) << " ";
        }
        std::cout << std::endl;
    }
    
    std::cout << "Norm: " << mat.Norm() << std::endl;
    
    return 0;
}
